<?php

/**
 * @file
 * Implementation of the Feeds mapping API for the remote file source/filefield sources module.
 */

/**
 * Implements hook_feeds_processor_targets_alter().
 */
function rfs_feeds_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
  if ($bundle_name === NULL) {
    return;
  }

  if (module_exists('file')) {
    $field_types[] = 'file';
  }

  foreach (field_info_instances($entity_type, $bundle_name) as $name => $instance) {
    $info = field_info_field($name);

    if (in_array($info['type'], $field_types)) {

      if (module_exists('remote_stream_wrapper')) {
        $targets[$name . ':RfsFeedsProvider'] = array(
          'name' => t('@label (remote_stream_wrapper)', array('@label' => $instance['label'])),
          'callback' => 'rfs_feeds_set_target',
          'description' => t('The @label field of the node. Value is a remote URI supported by remote_stream_wrapper. The file will be referenced from a remote server instead of downloading it to the local disk.', array('@label' => $instance['label'])),
        );
      }
    }
  }
}

/**
 * The actual mapping happens here.
 */
function rfs_feeds_set_target($source, $entity, $target, $values, $config = array()) {
  if (empty($values)) {
    return;
  }

  if (!is_array($values)) {
    $values = array($values);
  }

  $field_info = field_info_field($target);
  $field = array(LANGUAGE_NONE => array());
  //$node->field_file[$node->language][0]['value'] = array('fid' => $fileobj->fid);
  //$node->field_file = array(LANGUAGE_NONE => array('0' => (array)$fileobj));

  // Get the provider class name by splitting $target.
  list($target, $provider) = explode(':', $target, 2) + array(1 => 'RfsFeedsProvider');

  foreach ($values as $value) {
    //try {
      // Find a provider to create a file object.
      $provider = new $provider($value, $config);

      // Validate and get a file object.
      $provider->validate();
      $file = $provider->getFileObject();
      if (!$file) {
        drupal_set_message(t('Failed to get the file object for %value.', array('%value' => (string) $value)));
        continue;
      }

      // Look for the field instance settings.
      $instance = field_info_instance($entity->feeds_item->entity_type, $target, $entity->type);


      $file = $provider->save();
      if (!$file) {
        drupal_set_message(t('Failed to save the file.'), 'error');
        continue;
      }
    
    // Apply author settings to the file.
      if ((empty($file->uid) && !empty($entity->uid)) || $file->uid != $entity->uid) {
        $file->uid = $entity->uid;
        if (!file_save($file)) {
          drupal_set_message(t('Failed to apply the author settings to the file.'), 'warning');
        }
      }

    // Attach the file to the field.
      $result = array(
        'fid' => $file->fid,
        'display' => 1,
        'description' => '',
      );
      //dsm($field_info['type']);
      //if ($field_info['type'] == 'file') {
       // dsm($result);  
       // $result += array(
        //  'display' => 1,
        //  'description' => '',
        //);
      //}
      $field[LANGUAGE_NONE][] = $result;
  }
  
  $entity->{$target} = $field;
}
