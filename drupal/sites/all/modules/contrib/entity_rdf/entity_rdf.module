<?php

/**
 * @file
 * Module file for entity RDF.
 */

/**
 * Implements hook_entity_property_info_alter().
 */
function entity_rdf_entity_property_info_alter(&$info) {
  // Collect all mappings declared by modules.
  $mappings = module_invoke_all('entity_rdf_mappings');

  // Loop through all entity types and attach an RDF mapping to each property,
  // field, and field property if such mapping exists.
  foreach ($info as $entity_type => &$entity_info) {
    // Initializes the bundles override for those entity types which only have
    // one bundle by default, e.g. file.
    if (empty($entity_info['bundles'])) {
      $entity_info['bundles'][$entity_type]['properties'] = array();
    }

    // Bundles loop.
    foreach ($entity_info['bundles'] as $bundle => &$bundle_info) {
      // Attach RDF mapping for the bundle (typically RDF types).
      $key = implode(':', array($entity_type, $bundle));
      if (!empty($mappings[$key])) {
        $bundle_info['rdf mapping'] = $mappings[$key];
      }
      // Go through each field and see if there exists an RDF mapping for it.
      foreach ($bundle_info['properties'] as $field => &$field_info) {
        // Attach RDF mapping for the field.
        $key = implode(':', array($entity_type, $bundle, $field));
        if (!empty($mappings[$key])) {
          $field_info['rdf mapping'] = $mappings[$key];
          unset($field_info['rdf mapping']['field properties']);
        }
        // Attach RDF mapping for each field property.
        if (!empty($field_info['property info'])) {
          foreach ($field_info['property info'] as $field_property => &$field_property_info) {
            if (!empty($mappings[$key]['field properties'][$field_property])) {
              $field_property_info['rdf mapping'] = $mappings[$key]['field properties'][$field_property];
            }
          }
        }
      }
      // Go through each property and see if there exists an RDF mapping.
      foreach ($entity_info['properties'] as $property => $property_info) {
        // Each entity type property can have an RDF mapping that is specific
        // to a particular bundle. For example the mapping of the title for
        // an 'article' content type might differ from the title mapping
        // of a 'person' content type. Although entity type properties are
        // defined at the level of the entity type, they can be overridden
        // for each bundle.
        $key = implode(':', array($entity_type, $bundle, $property));
        if (!empty($mappings[$key])) {
          // If the bundle override for this property doesn't exist yet, we
          // initialize it with the content of the entity type property info.
          if (empty($bundle_info['properties'][$property])) {
            $bundle_info['properties'][$property] = $property_info;
          }
          $bundle_info['properties'][$property]['rdf mapping'] = $mappings[$key];
        }
      }
    }
  }
}

// Mappings are visible in both:
// entity_metadata_wrapper('node', 1)->getPropertyInfo()
// entity_get_property_info('node')


// Dummy function to store the mappings until a better structure is defined.
// @todo find a perfect structure that is exportable. granularity should
// probably go to the field level. @see http://drupal.org/node/1712982
// @debate using rdf properties to distinguish from all the other references to
// properties we have in Drupal... predicate is what's used in D7 but that
// terminology may be too obscure for developers, though on the other hand
// it's a clear way to differentiate from the overly used 'properties'.
function entity_rdf_entity_rdf_mappings() {
  return array(
    // node event mappings (bundle, property and field property mappings).
    'node:article' => array(
      'rdf types' => array('http://schema.org/NewsArticle'),
    ),
    'node:article:title' => array(
      'rdf properties' => array('http://schema.org/name', 'http://schema.org/name2'),
    ),
    'node:article:author' => array(
      'rdf properties' => array('http://schema.org/creator'),
      'rdf value' => '[node:author:name]',
    ),
    'node:article:created' => array(
      'rdf properties' => array('http://schema.org/created'),
      'rdf value callback' => 'date_iso8601',
      'rdf value datatype' => 'http://www.w3.org/2001/XMLSchema#dateTime',
    ),
    'node:article:body' => array(
      'field properties' => array(
        'value' => array(
          'rdf properties' => array('http://schema.org/articleBody'),
        ),
      ),
    ),
    'node:article:field_tags' => array(
      'rdf properties' => array('http://schema.org/keyword'),
    ),
    'node:article:field_cuisine' => array(
      'rdf properties' => array('http://schema.org/cuisine'),
      'rdf resource' => '[node:field-cuisine:field-wikipedia-url:url]',
    ),

    // node event mappings (bundle, property and field property mappings).
    'node:event' => array(
      'rdf types' => array('http://schema.org/Event'),
    ),
    'node:event:title' => array(
      'rdf properties' => array('http://schema.org/eventname'),
    ),
    'node:event:author' => array(
      'rdf properties' => array('http://schema.org/author'),
    ),
    'node:event:field_date' => array(
      'rdf properties' => array('http://schema.org/startDate'),
      'rdf value callback' => 'date_iso8601',
      'rdf value datatype' => 'http://www.w3.org/2001/XMLSchema#dateTime',
    ),
    'node:event:field_date2' => array(
      'field properties' => array(
        'value' => array(
          'rdf properties' => array('http://schema.org/startDate'),
          'rdf value callback' => 'date_iso8601',
          'rdf value datatype' => 'http://www.w3.org/2001/XMLSchema#dateTime',
        ),
        'value2' => array(
          'rdf properties' => array('http://schema.org/endDate'),
          'rdf value callback' => 'date_iso8601',
          'rdf value datatype' => 'http://www.w3.org/2001/XMLSchema#dateTime',
        ),
      ),
    ),
    // addressfield example including field properties mapping.
    'node:event:field_address' => array(
      'rdf types' => array('http://schema.org/PostalAddress'),
      'rdf properties' => array('http://schema.org/address'),
      'field properties' => array(
        'thoroughfare' => array(
          'rdf properties' => array('http://schema.org/streetAddress'),
        ),
        'locality' => array(
          'rdf properties' => array('http://schema.org/addressLocality'),
        ),
        'administrative_area' => array(
          'rdf properties' => array('http://schema.org/addressRegion'),
        ),
        'postal_code' => array(
          'rdf properties' => array('http://schema.org/postalCode'),
        ),
        'country' => array(
          'rdf properties' => array('http://schema.org/addressCountry'),
        ),
      ),
    ),
    // Link field example including field properties mapping.
    'node:event:field_link' => array(
      'field properties' => array(
        'title' => array(
          'rdf properties' => array('http://schema.org/name'),
        ),
        'url' => array(
          'rdf properties' => array('http://schema.org/url'),
        ),
      ),
    ),
    // entityreference field example including field properties mapping.
    'node:event:field_related_article' => array(
      'rdf properties' => array('http://schema.org/related'),
    ),
    // Image field example including field properties mapping.
    'node:event:field_image' => array(
      'rdf properties' => array('http://schema.org/image'),
      'rdf types' => array('http://schema.org/Image'),
      'rdf resource' => '[node:field_image]',
      'field properties' => array(
        'alt' => array(
          'rdf properties' => array('http://schema.org/description'),
        ),
      ),
    ),

    // Comment mappings.
    // Bundle mapping.
    'comment:comment_node_event' => array(
      'rdf types' => array('http://schema.org/Comment'),
    ),
    // Property mapping.
    'comment:comment_node_event:subject' => array(
      'rdf properties' => array('http://schema.org/articletitle'),
    ),
    // Field mapping.
    'comment:comment_node_event:comment_body' => array(
      'field properties' => array(
        'value' => array(
          'rdf properties' => array('http://schema.org/body'),
        ),
      ),
    ),

    // file mappings
    'file:file' => array(
      'rdf types' => array('http://schema.org/File'),
    ),
    'file:file:name' => array(
      'rdf properties' => array('http://schema.org/filename'),
    ),

  );
}

// Another idea for structure (similar to D7 core). (not used for now)
// Entity API doesn't use # keys so I'm hesitant to introduce them.
// # would be used on rdf_types and rdf_properties.
// We nest the field property info inside the top mapping for the field, reusing
// the same key as Entity API for compound fields: 'property info'.
function _entity_rdf_mappings2() {
  return array(
    'node' => array(
      'event' => array(
        'field_address' => array(
          'rdf types' => array('http://schema.org/PostalAddress'),
          'rdf properties' => array('http://schema.org/address'),
          'field properties' => array(
            'thoroughfare' => array(
              'rdf properties' => array('http://schema.org/streetAddress'),
            ),
            'locality' => array(
              'rdf properties' => array('http://schema.org/addressLocality'),
            ),
            'administrative_area' => array(
              'rdf properties' => array('http://schema.org/addressRegion'),
            ),
            'postal_code' => array(
              'rdf properties' => array('http://schema.org/postalCode'),
            ),
            'country' => array(
              'rdf properties' => array('http://schema.org/addressCountry'),
            ),
          ),
        ),
      ),
    ),
  );
}
